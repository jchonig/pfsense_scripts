#!/bin/sh

#
# This script updates the SG-3100 device's first LED with gateway status
#
# Based on tcsh script by msf2000 on this thread https://forum.netgate.com/topic/122407/netgate-sg-3100-leds
# Finding gpio device based on https://github.com/justdaniel-gh/sg3100customleds/commit/ddbf412cb1cf3ba32160972e2177c356611ff57f
#
progname=$(basename ${0})

fail () {
    local rc=${1}

    shift

    logger -s -t "${progname}" -p daemon.err ${*}

    exit ${rc}
}

err () {
    logger -s -t "${progname}" -p daemon.err ${*}
}

# gpio device number
# A way to get the gpio device that controls the led lights (its not always 0)
gdev="$(sysctl dev.gpio | grep .led. | cut -d . -f 3 | uniq)"
if [ -z "${gdev}" ]; then
    fail 1 "Unable to find LED device"
fi

# based on gwstatus, set color of first LED
# led a  -  led b  -  led c
# 6 7 8  -  3 4 5  -  0 1 2 

set_led () {
    /usr/sbin/gpioctl -f /dev/gpioc${gdev} ${1} duty ${2}
}

set_leds () {

    if [ $# -ne 4 ]; then
	err "Invalid call to set_leds: $*"
	return
    fi

    case ${1} in
	"a")
	    led=0
	    red=6
	    green=7
	    blue=8
	    ;;
	"b")
	    led=1
	    red=3
	    green=4
	    blue=5
	    ;;
	"c")
	    led=2
	    red=0
	    green=1
	    blue=2
	    ;;
    esac

    # Enable PWM mode
    sysctl dev.gpio.${gdev}.led.${led}.pwm=1

    set_led ${red} ${2}
    set_led ${green} ${3}
    set_led ${blue} ${4}
}

set_status () {
    case ${2} in
	"down"|"none")
	    # Down
	    set_leds ${1} 16 0 0
	    ;;
	"online")
	    # Online, look at substates
	    case ${3} in
		"none")
		    set_leds ${1} 0 16 0
		    ;;
		"force_down")
		    set_leds ${1} 16 0 0
		    ;;
		"delay"|"loss")
		    set_leds ${1} 16 4 0
		    ;;
		"high_delay"|"high_loss")
		    set_leds ${1} 16 2 0
		    ;;
		*)
		    # Unknown
		    set_letds ${1} 0 0 8
		    ;;
	    esac
	    ;;
	*)
	    # Unknown
	    set_leds ${1} 0 0 16
	    ;;
    esac
}

verbose () {
    test -z "$do_verbose" && return

    echo "V: ${*}" >&2
}

gw_a=
gw_b=
gw_c=
do_verbose=

OPTIONS=$(getopt "a:b:c:vA:B:C:" $*) || exit 1
set -- ${OPTIONS}
while true; do
    case ${1} in
	"-a")
	    gw_a="${2}"
	    shift 2
	    ;;
	"-b")
	    gw_b="${2}"
	    shift 2
	    ;;
	"-c")
	    gw_c="${2}"
	    shift 2
	    ;;
	"-A")
	    eval set_leds a $(echo ${2} | sed 's/,/ /g')
	    shift 2
	    ;;
	"-B")
	    eval set_leds b $(echo ${2} | sed 's/,/ /g')
	    shift 2
	    ;;
	"-C")
	    eval set_leds c $(echo ${2} | sed 's/,/ /g')
	    shift 2
	    ;;
	"-v")
	    do_verbose='-v'
	    shift
	    ;;
	--)
	    shift
	    break
	    ;;
	*)
	    fail "Internal error!"
	    ;;
    esac
done

# 21.05x
# /usr/local/bin/php /usr/local/sbin/pfSsh.php playback gatewaystatus
# Name           Monitor        Source              Delay   StdDev  Loss  Status  Substatus
# WAN_EA_DHCP    38.145.154.1   38.145.155.206    2.188ms  0.236ms  0.0%  online       none
# WAN_OTTC_DHCP  192.190.166.1  192.190.166.60     0.74ms  0.177ms  0.0%  online       none

/usr/local/bin/php /usr/local/sbin/pfSsh.php playback gatewaystatus | \
    while read name monitor source delay stddev loss status substatus; do
	test "${name}" == "Name" && continue
	verbose "Name: ${name} ${source}->${monitor} Delay: ${delay} Stdev: ${stdev} Loss: ${loss} Status: ${status} Substatus: ${substatus}"
	if [ "${name}" == "${gw_a}" ]; then
	    set_status "a" "${status}" "${substatus}"
	elif [ "${name}" == "${gw_b}" ]; then
	    set_status "b" "${status}" "${substatus}"
	elif [ "${name}" == "${gw_c}" ]; then
	    set_status "c" "${status}" "${substatus}"
	else
	    err "Gateway ${name} not matched"
	fi
    done

exit 0
